[{"name":"app.R","content":"# Shiny Dashboard\r\n# Hastag (# ---------------------------------------------------------------) means Primary Header\r\n# Hastag (### *** Definition ###) means Secondary Header\r\n# Hold shift alt o to collapse all\r\n# Hold alt o to expand all\r\n\r\n# Load Packages ---------------------------------------------------------------\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(ggplot2)\r\n#library(dplyr)\r\n#Loading shinyjs really slowed down my application load time. By loading just the functions I required such as shnyjs::useShinyjs(), my application ran way faster\r\n#library(shinyjs)\r\n\r\n\r\n\r\n# Load Data ---------------------------------------------------------------\r\n\r\n# State Community Health Services Advisory Committee as of 1_17_2024\r\ndf_schsacRaw <- read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/State%20Community%20Health%20Services%20Advisory%20Committee%20as%20of%201_17_2024.csv\")\r\n# Community Health Board as of 1_17_2024\r\ndf_chbRaw <- read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/Community%20Health%20Board%20as%20of%201_17_2024.csv\")\r\n\r\n#Healthy Homes\r\n#* Childhood Lead Exposure\r\ndf_leadRaw <-  read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\")\r\n#Radon\r\n\r\n# User Interface ----------------------------------------------------------\r\nui <- dashboardPage(\r\n  dashboardHeader(\r\n    title = \"MN Public Health Data Access Portal\",\r\n    titleWidth = 400\r\n    #disable = TRUE #uncomment if the header should be hid\r\n  ),\r\n  dashboardSidebar(\r\n    width = 350, #This makes the sidebar wider. However, the input boxes seem to have a set dimension resulting in long names still wrapping\r\n    # The next items require\r\n    #The input parameters are global parameters\r\n    checkboxInput(inputId = \"parGlobal_hideNarrative\", label = \"HIDE NARRATIVE\"),\r\n    # Other input elements...\r\n    selectInput(\r\n      \"parGlobal_county\",\r\n      label= \"Select County of Interest\",\r\n      choices= sort(unique(df_schsacRaw$County)),\r\n      selected= \"Kittson\",\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      \"parGlobal_region\",\r\n      label= \"Select SCHSAC Region\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      \"parGlobal_chb\",\r\n      label= \"Select Community Health Board\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    #Sidebar is required to have sub menus because it requires the tabName to reference\r\n    #By having sidebarMenu id, you can reference it and hide other filters with shinyjs \r\n    # The CHB and Region Filters are greyed out when onthe Region & CHB Defintions\r\n    sidebarMenu(\r\n      id= \"smID\",\r\n      menuItem(\"Home\", tabName = \"tn_homePage\"),\r\n      menuItem(\"Region & CHB Defintions\", tabName = \"tn_regionChbDefinations\"),\r\n      menuItem(\"Child Health\", tabName = \"tn_childHealth\"),\r\n      menuItem(\"Climate\", tabName = \"tb_climate\"),\r\n      menuItem(\"Diseases & Conditions\", tabName = \"tn_diseasesConditions\"),\r\n      menuItem(\"Environmental Health\", tabName = \"tn_environmentalHealth\"),\r\n      menuItem(\"Health Behaviors/Risk Factors\", tabName = \"tn_healthBehaviorsRiskFactors\"),\r\n      menuItem(\"Health Equity\", tabName = \"tn_HealthEquity\"),\r\n      menuItem(\"Healthy Homes\", tabName = \"tn_healthyHomes\")\r\n    )\r\n  ),\r\n  dashboardBody(\r\n    shinyjs::useShinyjs(), #Thank you Abby Stamm at MDH for suggesting to only call one function in a package rather then load entire package \r\n    fluidRow(\r\n      column(12,\r\n             tabItems(\r\n               tabItem(\r\n                 tabName = \"tn_homePage\", #tabName is what ties the menuItem to the tabItem\r\n                 tabsetPanel(\r\n                   tabPanel(\r\n                     \"Home Page\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the purpose of the dashboard\r\n                       column(\r\n                         width = 12,\r\n                         tags$h1(\"Welcome to the Landing Page for This Awesome Dashboard...Subjective of Course :)\"),\r\n                         tags$h4(\"This shinyLive application is designed to replicate the work represeted \", \r\n                                 tags$a(href=\"https://data.web.health.state.mn.us/web/mndata/\", \"here!\", target= \"_blank\")\r\n                         ),\r\n                         tags$h4(\"The features displayed on the top left are called parameters that require input from you\"),\r\n                         tags$h4(\"The features displayed on the botton left are called sidebar menus.\"),\r\n                         tags$h4(\"Each sidebar menu will have at least one tab associated with it.\"),\r\n                         tags$h4(\"For example, this Home sidebar menu has the Home Page tab associated with it.\"),\r\n                         tags$h3(\"Currently, only two sidebar menus currently are working\"),\r\n                         tags$h4(\"The Region & CHB Defintions sidebar menu has both tabs (Region and CHB) working\"),\r\n                         tags$h4(\"The Healthy Homes sidebar menu only has the Childhood Lead Exposure tab working\"),\r\n                         tags$h4(\"Limitations to the Childhood Lead Exposure data can be found \", \r\n                                 tags$a(href=\"https://data.web.health.state.mn.us/lead_metadata\", \"here!\", target= \"_blank\")\r\n                         )\r\n                       )\r\n                     )\r\n                   )\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_regionChbDefinations\",\r\n                 tabsetPanel(\r\n                   tabPanel(\r\n                     \"Region\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the dashboard purpose\r\n                       column(\r\n                         width = 12,\r\n                         h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Regions will remain in <b>bold<\/b>.\")),\r\n                         h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they do not execute any function on this tab.\"),\r\n                         h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which region.\"),\r\n                         #The next line inserts a line between the narrative and the data\r\n                         tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                       )\r\n                     ),\r\n                     fluidRow(\r\n                       uiOutput(\"region_narrative\", style = \"font-size: 20px;\")\r\n                     )\r\n                   ),\r\n                   tabPanel(\r\n                     \"CHB\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the purpose of the dashboard\r\n                       column(\r\n                         width = 12,\r\n                         h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Community Health Boards will remain in <b>bold<\/b>.\")),\r\n                         h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they don't have any functions on this page.\"),\r\n                         h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which Community Health Board.\"),\r\n                         #The next line inserts a line between the narrative and the data\r\n                         tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                       )\r\n                     ),\r\n                     fluidRow(\r\n                       column(6, uiOutput(\"chb_narrative_01\", style = \"font-size: 20px;\")),\r\n                       column(6, uiOutput(\"chb_narrative_02\", style = \"font-size: 20px;\"))\r\n                     )\r\n                   )\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_childHealth\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Asthma\"),\r\n                   tabPanel(\"Health Inequities in Childhood Asthma\"),\r\n                   tabPanel(\"Birth Defects\"),\r\n                   tabPanel(\"Childhood Lead Exposure\"),\r\n                   tabPanel(\"Free/Reduced Price Lunch Eligibility\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Oral Health\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tb_climate\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Air Quality\"),\r\n                   tabPanel(\"Cold-related Illness\"),\r\n                   tabPanel(\"tbClimate-related Environmental Health Concerns\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Hot Weather\"),\r\n                   tabPanel(\"Pollen\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_diseasesConditions\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Asthma\"),\r\n                   tabPanel(\"Birth Defects\"),\r\n                   tabPanel(\"Cancer\"),\r\n                   tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                   tabPanel(\"Chronic Obstructive Pulmonary Disease (COPD)\"),\r\n                   tabPanel(\"Diabetes\"),\r\n                   tabPanel(\"Heart Attacks\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Oral Health\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_environmentalHealth\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Air Quality\"),\r\n                   tabPanel(\"Biomonitoring: Chemicals in people\"),\r\n                   tabPanel(\"Cold-related Illness\"),\r\n                   tabPanel(\"Drinking Water Quality\"),\r\n                   tabPanel(\"Environmental Justice\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Pesticide Poisoning\"),\r\n                   tabPanel(\"Traffic\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_healthBehaviorsRiskFactors\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Health Insurance\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Obesity\"),\r\n                   tabPanel(\"Oral Health\"),\r\n                   tabPanel(\"Poverty & Income\"),\r\n                   tabPanel(\"Smoking\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_HealthEquity\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Health Equity\"),\r\n                   tabPanel(\"Health Inequities in Childhood Lead Exposure\"),\r\n                   tabPanel(\"Health Inequities in Childhood Asthma\")\r\n                 )\r\n               ),\r\n               tabItem(\r\n                 tabName = \"tn_healthyHomes\",\r\n                 tabsetPanel(\r\n                   id=\"tpId_healthyHomes\",\r\n                   tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                   tabPanel(\"Childhood Lead Exposure\",\r\n                            fluidRow(\r\n                              # Narrative section explaining the purpose of the dashboard\r\n                              column(\r\n                                width= 1,\r\n                                selectInput(\r\n                                  \"parLocal_leadYear\",\r\n                                  label= \"Select Year\",\r\n                                  choices= sort(unique(df_leadRaw$year), decreasing = TRUE),\r\n                                  selected= max(unique(df_leadRaw$year)),\r\n                                  multiple= FALSE\r\n                                ),\r\n                                selectInput(\r\n                                  \"par_leadStateRegionChb\",\r\n                                  label= \"Select Comparison\",\r\n                                  choices= c(\"All\", \"CHB\", \"Region\", \"State\"),\r\n                                  selected= \"All\",\r\n                                  multiple= FALSE\r\n                                )\r\n                              ),\r\n                              # Narrative section explaining the purpose of the dashboard\r\n                              column(\r\n                                width = 11,\r\n                                id = \"cID_leadNarrative\",\r\n                                tags$h4(htmlOutput(\"lead_narrative\")),\r\n                                tags$h3(\"For information about why this data is important please visit \", \r\n                                        tags$a(href=\"https://data.web.health.state.mn.us/lead\", \"here!\", target= \"_blank\")\r\n                                ),\r\n                                tags$h3(\"Data for this project can be found \", \r\n                                        tags$a(href=\"https://data.web.health.state.mn.us/lead_query\", \"here!\", target= \"_blank\")\r\n                                ),\r\n                                tags$h3(\"Data for this project is stored \", \r\n                                        tags$a(href=\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\", \r\n                                               \"here!\", target= \"_blank\")\r\n                                )\r\n                              )\r\n                            ),\r\n                            fluidRow(\r\n                              #The next line inserts a line between the narrative and the data.\r\n                              #It is added here instead of in the narrative since the narrative can have multiple columns. \r\n                              #If there are multiple narrative columns and the line is added there than the line consists of multiple breaks \r\n                              tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\"),\r\n                              box(plotOutput(\"lead_state\")),\r\n                              box(plotOutput(\"lead_region\"))\r\n                            ),\r\n                            fluidRow(\r\n                              box(plotOutput(\"lead_chb\")),\r\n                              box(plotOutput(\"lead_county\"))\r\n                            )\r\n                   ),\r\n                   tabPanel(\"Drinking Water Quality\"),\r\n                   tabPanel(\"Pesticide Poisoning\"),\r\n                   tabPanel(\"Radon\"),\r\n                 )\r\n               )\r\n             )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Preload Data prior to Server -----------------------------\r\n#To improve performance load these once and don't have them run every time the server runs\r\n\r\n\r\n#* Region & County Definitions ---------------------------------------------\r\n# Create region data frame for global narrative reference\r\nschsac_raw <- df_schsacRaw\r\nschsac_raw$Region <-  paste(\"<b>\", schsac_raw$Region, \"<\/b>\") #Bold Regions so it is easier to understand narrative\r\n\r\n# Create chb data frame for global narrative reference\r\n# CHB Narrative 01 (It is split in half so it displays in two nice columns on the UI\r\nchb_raw_01 <- df_chbRaw[1:33,]\r\nchb_raw_01$CHB <-  paste(\"<b>\", chb_raw_01$CHB, \"<\/b>\") #Bold CHBs so it is easier to understand narrative\r\n\r\n# Create chb data frame for global narrative reference\r\n# CHB Narrative 02 (It is split in half so it displays in two nice columns on the UI\r\nchb_raw_02 <- df_chbRaw[34:nrow(df_chbRaw),] # :nrow means it goes to the end of the data frame\r\nchb_raw_02$CHB <-  paste(\"<b>\", chb_raw_02$CHB, \"<\/b>\") #Bold CHBs so it is easier to understand narrative\r\n\r\n#* Healthy Homes -----------------------------\r\n\r\n#Childhood Lead Exposure\r\n#Region\r\n# Combine Region\r\n# A lot of sources online say to use all= TRUE after the by condition for an inner. \r\n# This does not appear to be correct. It seems like it is executing an outer join not an inner join\r\nlead_Region <- merge(x= df_leadRaw, y= df_schsacRaw, by.x= \"location\", by.y= \"County\") #, all = TRUE) Don't include the all = TRUE \r\n\r\n# #https://www.youtube.com/watch?v=zmiC7X9fUmo\r\n# First sum number tested\r\n# Next sum denominator\r\n#Combine in a completed data set\r\n\r\n#Sum will be applied to numTested and it will (~) be subsetted by everything after\r\nlead_RegionGrpTested <-  aggregate(numTested~ ageGroup+ Region+ year+ indicator+ indicator.type+ ebllDescription, lead_Region, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_RegionGrpTested)[colnames(lead_RegionGrpTested) == 'numTested'] <- 'regionNumTested'\r\n\r\nlead_RegionGrpDenominator <-  aggregate(denominator~ ageGroup+ Region+ year+ indicator+ indicator.type+ ebllDescription, lead_Region, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_RegionGrpDenominator)[colnames(lead_RegionGrpDenominator) == 'denominator'] <- 'regionDenominator'\r\n\r\nlead_RegionWithTestGrp <- merge(x= lead_Region, \r\n                                y= lead_RegionGrpTested, \r\n                                by= c(\"ageGroup\", \"Region\", \"year\", \"indicator\", \"indicator.type\", \"ebllDescription\"), \r\n                                all.x = TRUE) #Left join so counties may be displayed moving forward\r\nlead_RegionComplete <- merge(x= lead_RegionWithTestGrp, \r\n                             y= lead_RegionGrpDenominator, \r\n                             by= c(\"ageGroup\", \"Region\", \"year\", \"indicator\", \"indicator.type\", \"ebllDescription\"), \r\n                             all.x = TRUE) #Left join so counties may be displayed moving forward\r\nlead_RegionComplete$regionTestPct <- round(lead_RegionComplete$regionNumTested/lead_RegionComplete$regionDenominator*100,2)\r\n\r\n# Combine CHB\r\n# This does not appear to be correct when including the all = TRUE. It seems like it is executing an outer join not an inner join\r\nlead_CHB <- merge(x= df_leadRaw, y= df_chbRaw, by.x= \"location\", by.y= \"County\") #, all = TRUE) Don't include the all = TRUE\r\n\r\n# #https://www.youtube.com/watch?v=zmiC7X9fUmo\r\n# First sum number tested\r\n# Next sum denominator\r\n#Combine in a completed data set\r\n\r\n#Sum will be applied to numTested and it will (~) be subset by everything after\r\nlead_CHBGrpTested <-  aggregate(numTested~ ageGroup+ CHB+ year+ indicator+ indicator.type+ ebllDescription, lead_CHB, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_CHBGrpTested)[colnames(lead_CHBGrpTested) == 'numTested'] <- 'chbNumTested'\r\n\r\nlead_CHBGrpDenominator <-  aggregate(denominator~ ageGroup+ CHB+ year+ indicator+ indicator.type+ ebllDescription, lead_CHB, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_CHBGrpDenominator)[colnames(lead_CHBGrpDenominator) == 'denominator'] <- 'chbDenominator'\r\n\r\nlead_CHBWithTestGrp <- merge(x= lead_CHB, \r\n                             y= lead_CHBGrpTested, \r\n                             by= c(\"ageGroup\", \"CHB\", \"year\", \"indicator\", \"indicator.type\", \"ebllDescription\"), \r\n                             all.x = TRUE) #Left join so counties may be displayed moving forward\r\n\r\nlead_CHBComplete <- merge(x= lead_CHBWithTestGrp, \r\n                          y= lead_CHBGrpDenominator, \r\n                          by= c(\"ageGroup\", \"CHB\", \"year\", \"indicator\", \"indicator.type\", \"ebllDescription\"), \r\n                          all.x = TRUE) #Left join so counties may be displayed moving forward\r\n\r\nlead_CHBComplete$CHBTestPct <- round(lead_CHBComplete$chbNumTested/lead_CHBComplete$chbDenominator*100,2)\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n\r\n# Region & County ---------------------------------------------------------\r\n\r\n  output$region_narrative <- renderUI({\r\n    # Replace the values that are equal to input county by adding the font tag\r\n    schsac_raw$County[schsac_raw$County == input$parGlobal_county] <-  paste(\"<font color=red>\", schsac_raw$County[schsac_raw$County == input$parGlobal_county], \"<\/font>\")\r\n    \r\n    # Split the data frame by the group column\r\n    schsac_split <- split(schsac_raw , schsac_raw$Region)\r\n    \r\n    # Apply a function to each subset to create a new column with comma-separated values\r\n    schsac_character <- sapply(schsac_split, function(x) paste(x$County, collapse = \", \"))\r\n    \r\n    # Convert the result to a data frame\r\n    schsac_df <- as.data.frame(schsac_character)\r\n    \r\n    # Create an empty character vector to store the results\r\n    schsac_result <- character()\r\n    \r\n    # Loop through each row of schsac_df\r\n    for (i in 1:nrow(schsac_df)) {\r\n      # Get the row name and schsac_character_placeholder as strings\r\n      rowname <- as.character(rownames(schsac_df)[i])\r\n      schsac_character_placeholder <- as.character(schsac_df$schsac_character[i])\r\n      \r\n      # Concatenate them with a separator\r\n      concat <- paste0(rowname, \":: \", schsac_character_placeholder)\r\n      \r\n      # Append the result to the vector\r\n      schsac_result <- c(schsac_result, concat)\r\n    }\r\n    \r\n    # Paste the result vector and create a new line after each Region\r\n    HTML(paste(schsac_result, collapse=  \"<br/>\"))\r\n    \r\n  })\r\n  \r\n  output$chb_narrative_01 <- renderUI({\r\n    # Replace the values that are equal to input county by adding the font tab\r\n    chb_raw_01$County[chb_raw_01$County == input$parGlobal_county] <-  paste(\"<font color=red>\", chb_raw_01$County[chb_raw_01$County == input$parGlobal_county], \"<\/font>\")\r\n    \r\n    # Split the data frame by the chb\r\n    chb_split <- split(chb_raw_01 , chb_raw_01$CHB)\r\n    \r\n    # Apply a function to each subset to create a new column with comma-separated values\r\n    chb_character <- sapply(chb_split, function(x) paste(x$County, collapse = \", \"))\r\n    \r\n    # Convert the result to a data frame\r\n    chb_df <- as.data.frame(chb_character)\r\n    \r\n    # Create an empty character vector to store the results\r\n    chb_result <- character()\r\n    \r\n    # Loop through each row of chb_df\r\n    for (i in 1:nrow(chb_df)) {\r\n      # Get the row name and chb_character_placeholder as strings\r\n      rowname <- as.character(rownames(chb_df)[i])\r\n      chb_character_placeholder <- as.character(chb_df$chb_character[i])\r\n      \r\n      # Concatenate them with a separator\r\n      concat <- paste0(rowname, \":: \", chb_character_placeholder)\r\n      \r\n      # Append the result to the vector\r\n      chb_result <- c(chb_result, concat)\r\n    }\r\n    \r\n    # Paste the result vector and create a new line after each CHB\r\n    HTML(paste(chb_result, collapse =  \"<br/>\"))\r\n  })\r\n  \r\n  output$chb_narrative_02 <- renderUI({\r\n    # Replace the values that are equal to input county by adding the font tab\r\n    chb_raw_02$County[chb_raw_02$County == input$parGlobal_county] <-  paste(\"<font color=red>\", chb_raw_02$County[chb_raw_02$County == input$parGlobal_county], \"<\/font>\")\r\n    \r\n    # Split the data frame by the chb\r\n    chb_split <- split(chb_raw_02 , chb_raw_02$CHB)\r\n    \r\n    # Apply a function to each subset to create a new column with comma-separated values\r\n    chb_character <- sapply(chb_split, function(x) paste(x$County, collapse = \", \"))\r\n    \r\n    # Convert the result to a data frame\r\n    chb_df <- as.data.frame(chb_character)\r\n    \r\n    # Create an empty character vector to store the results\r\n    chb_result <- character()\r\n    \r\n    # Loop through each row of chb_df\r\n    for (i in 1:nrow(chb_df)) {\r\n      # Get the row name and chb_character_placeholder as strings\r\n      rowname <- as.character(rownames(chb_df)[i])\r\n      chb_character_placeholder <- as.character(chb_df$chb_character[i])\r\n      \r\n      # Concatenate them with a separator\r\n      concat <- paste0(rowname, \":: \", chb_character_placeholder)\r\n      \r\n      # Append the result to the vector\r\n      chb_result <- c(chb_result, concat)\r\n    }\r\n    \r\n    # Paste the result vector and create a new line after each CHB\r\n    HTML(paste(chb_result, collapse =  \"<br/>\"))\r\n  })\r\n  \r\n  # Update the region input based on the county input\r\n  # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples. \r\n  # Currently, the county source is from the region data source but if it ever changes this should help capture it\r\n  observeEvent(input$parGlobal_county, {\r\n    if(input$parGlobal_county %in% df_schsacRaw$County) {\r\n      updateSelectInput(\r\n        session, \"parGlobal_region\",\r\n        choices =  unique(df_schsacRaw$Region[order(df_schsacRaw$County == input$parGlobal_county, decreasing = TRUE)]),\r\n        selected = unique(df_schsacRaw$Region[order(df_schsacRaw$County == input$parGlobal_county, decreasing = TRUE)])[1] #Default to the first choice, which will automatically change the cascading results when the parameter is mapped to a ggplot\r\n      )\r\n    }\r\n    else {\r\n      updateSelectInput(\r\n        session, \"parGlobal_region\",\r\n        choices = \"\",\r\n        selected = \"\"\r\n      )\r\n    }\r\n  }\r\n  )\r\n  \r\n  # Update the chb input based on the county input\r\n  # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples. \r\n  # Currently, the county source is from the chb data source but if it ever changes this should help capture it\r\n  observeEvent(input$parGlobal_county, {\r\n    if(input$parGlobal_county %in% df_chbRaw$County) {\r\n      updateSelectInput(\r\n        session, \"parGlobal_chb\",\r\n        choices =  unique(df_chbRaw$CHB[order(df_chbRaw$County == input$parGlobal_county, decreasing = TRUE)]),\r\n        selected = unique(df_chbRaw$CHB[order(df_chbRaw$County == input$parGlobal_county, decreasing = TRUE)])[1] #Default to the first choice, which will automatically change the cascading results when the parameter is mapped to a ggplot\r\n      )\r\n    }\r\n    else {\r\n      updateSelectInput(\r\n        session, \"parGlobal_chb\",\r\n        choices = \"\",\r\n        selected = \"\"\r\n      )\r\n    }\r\n  }\r\n  )\r\n  \r\n  # Observe what sidebar the user is on and only allow for read only access to global parameters\r\n  observe({\r\n    if(input$smID %in% c(\"tn_homePage\")) # it requires an ID of sidebarMenu (in this case)\r\n    {\r\n      shinyjs::hide(\"parGlobal_hideNarrative\")\r\n      shinyjs::hide(\"parGlobal_county\")\r\n      shinyjs::hide(\"parGlobal_region\")\r\n      shinyjs::hide(\"parGlobal_chb\")\r\n    }\r\n    else\r\n    {\r\n      shinyjs::show(\"parGlobal_hideNarrative\")\r\n      shinyjs::show(\"parGlobal_county\")\r\n      shinyjs::show(\"parGlobal_region\")\r\n      shinyjs::show(\"parGlobal_chb\")\r\n    }\r\n  })\r\n  \r\n  \r\n  # Observe what sidebar the user is on and only allow for read only access to global parameters\r\n  # observe({\r\n  #   if(input$smID %in% c(\"tn_regionChbDefinations\")) # it requires an ID of sidebarMenu (in this case)\r\n  #   {\r\n  #     shinyjs::hide(\"parGlobal_hideNarrative\")\r\n  #     shinyjs::hide(\"parGlobal_region\")\r\n  #     shinyjs::hide(\"parGlobal_chb\")\r\n  #   }\r\n  #   else\r\n  #   {\r\n  #     shinyjs::show(\"parGlobal_hideNarrative\")\r\n  #     shinyjs::show(\"parGlobal_region\")\r\n  #     shinyjs::show(\"parGlobal_chb\")\r\n  #   }\r\n  # })\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  # Observe the input value of the checkbox\r\n  observe({\r\n    # Submenu --> tab name dependent on the parGlbal_hideNarrative\r\n    #This is done so it isn't doing it in the background when tab panels or submenus are changes\r\n    # Shiny may already do this but my thought process is since I don't know for sure that I should include it in the application until I learn more about shiny 4/9/2024\r\n    if(input$smID == \"tn_healthyHomes\" & input$tpId_healthyHomes == \"Childhood Lead Exposure\" & isTRUE(input$parGlobal_hideNarrative))\r\n    {\r\n      #Toggle does not seem to work. It works for one interation and then it doesn't function correcly with the checkbox which is why there are two if statements\r\n      shinyjs::hide(\"parLocal_leadYear\") \r\n      shinyjs::hide(\"par_leadStateRegionChb\")\r\n      shinyjs::hide(\"cID_leadNarrative\")\r\n    }\r\n    if(input$smID == \"tn_healthyHomes\" & input$tpId_healthyHomes == \"Childhood Lead Exposure\" & isFALSE(input$parGlobal_hideNarrative))\r\n    {\r\n      shinyjs::show(\"parLocal_leadYear\")\r\n      shinyjs::show(\"par_leadStateRegionChb\")\r\n      shinyjs::show(\"cID_leadNarrative\")\r\n    }\r\n  })\r\n  \r\n  #Healthy Homes\r\n  \r\n  #Display every other label\r\n  # Get the unique values of x\r\n  xlabels <- unique(df_leadRaw$year)\r\n  # Remove every other value by subsetting with a logical vector\r\n  xlabels [c (FALSE, TRUE)] <- \"\"\r\n  \r\n  #Lead\r\n  #State\r\n  output$lead_state <-  renderPlot({\r\n    df_leadRaw[df_leadRaw$location ==\"Minnesota\" & \r\n                 df_leadRaw$indicator== \"Blood lead testing\"&\r\n                 df_leadRaw$indicator.type == \"Test year (annual method)\"\r\n               #Requires a comma to work\r\n               ,] |>\r\n      ggplot(aes(x= year, y= pctTested, color= ageGroup)) +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size \r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n      )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks= c('<3 years', '3-<6 years', '<6 years'))+\r\n      scale_x_discrete(limit= df_leadRaw$year, breaks = seq(min(df_leadRaw$year), max(df_leadRaw$year), 2))+ # add breaks argument here Microsoft Copilot AI generated\r\n      #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60)) +\r\n      labs(\r\n        title = \"Blood Lead Testing (Test Year) for all of \\nMinnesota\", #\\n means a new line \r\n        x = NULL,\r\n        y = \"Pct Tested\"\r\n        #caption = \"Data last updated, 1/15/2024\"\r\n      )\r\n  })\r\n  \r\n  \r\n  # #  \r\n  #Reactive Data\r\n  lead_region_sub <- reactive({lead_RegionComplete[input$parGlobal_region == lead_RegionComplete$Region & #Changed variable so no longer need to use gsub\r\n                                                     lead_RegionComplete$indicator== \"Blood lead testing\"&\r\n                                                     lead_RegionComplete$indicator.type == \"Test year (annual method)\",] })\r\n  \r\n  output$lead_region <-  renderPlot({\r\n    #Open parenthesis since it is dynamic\r\n    lead_region_sub() |>\r\n      ggplot(aes(x= year, y= regionTestPct, color= ageGroup)) +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size \r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n      )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n      scale_x_discrete(limit= df_leadRaw$year, breaks = seq(min(df_leadRaw$year), max(df_leadRaw$year), 2))+ # add breaks argument here Microsoft Copilot AI generated\r\n      #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60)) +\r\n      labs(\r\n        title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$parGlobal_region, \"Region\"), #\\n means a new line \r\n        x = NULL,\r\n        y = \"Pct Tested\"\r\n        #caption = \"Data last updated, 1/15/2024\"\r\n      )\r\n  })\r\n  \r\n  #CHB\r\n  \r\n  #Reactive Data\r\n  validateChb <- reactive({\r\n    validate(\r\n      need(\r\n        input$parGlobal_chb %in% lead_CHBComplete$CHB, paste(\"There is no data for \", input$parGlobal_chb)\r\n      )\r\n    )\r\n  })\r\n  \r\n  #Reactive Data\r\n  # validateChb <- reactive({\r\n  #                         if(input$parGlobal_chb == lead_CHBComplete$CHB\r\n  #                            ) \r\n  #                             {\r\n  #                             validate(\r\n  #                                     paste(\"There is no data for \", input$parGlobal_chb)\r\n  #                                     )\r\n  #                             }\r\n  #                       })\r\n  \r\n  #Reactive Data\r\n  lead_CHB_sub <- reactive({\r\n    lead_CHBComplete[\r\n      input$parGlobal_chb == lead_CHBComplete$CHB  &\r\n      lead_CHBComplete$indicator== \"Blood lead testing\"&\r\n      lead_CHBComplete$indicator.type == \"Test year (annual method)\",] \r\n  })\r\n  \r\n  \r\n  output$lead_chb <-  renderPlot({\r\n    validateChb() #Won't return red error meassage. It will display the validateChb error message \r\n    #Open parenthesis since it is dynamic\r\n    lead_CHB_sub() |>\r\n      ggplot(aes(x= year, y= CHBTestPct, color= ageGroup))  +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size \r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n      )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n      #Had this\r\n      # scale_x_discrete(limits = df_leadRaw$year, guide = guide_axis(n.dodge = 2))+\r\n      scale_x_discrete(limit= df_leadRaw$year, breaks = seq(min(df_leadRaw$year), max(df_leadRaw$year), 2))+ # add breaks argument here Microsoft Copilot AI generated\r\n      #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60)) +\r\n      labs(\r\n        title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$parGlobal_chb, \"CHB\"), #\\n means a new line\r\n        x = NULL,\r\n        y = \"Pct Tested\",\r\n        caption = \"Data last updated, 1/15/2024\"\r\n      )\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  # Get county data subset\r\n  lead_county_sub <- reactive({df_leadRaw[df_leadRaw$location == input$parGlobal_county & \r\n                                            df_leadRaw$indicator== \"Blood lead testing\" &\r\n                                            df_leadRaw$indicator.type == \"Test year (annual method)\",] \r\n  })\r\n  \r\n  output$lead_county <-  renderPlot({\r\n    #Open parenthesis since it is dynamic\r\n    lead_county_sub() |>\r\n  \r\n      ggplot(aes(x= year, y= pctTested, color= ageGroup)) +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size\r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n      )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n      scale_x_discrete(limit= df_leadRaw$year, breaks = seq(min(df_leadRaw$year), max(df_leadRaw$year), 2))+ # add breaks argument here Microsoft Copilot AI generated\r\n      #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60))+\r\n      labs(\r\n        title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$parGlobal_county, \"County\"), #\\n means a new line\r\n        x = NULL,\r\n        y = \"Pct Tested\"\r\n        # caption = \"Data last updated, 1/15/2024\"\r\n      )\r\n  })\r\n  \r\n  # https://stackoverflow.com/questions/23233497/outputting-multiple-lines-of-text-with-rendertext-in-r-shiny\r\n  output$lead_narrative <- renderUI({\r\n    ####################################################################################################################################################################################\r\n    ## LESS then 3 YEARS OF AGE\r\n    \r\n    ##### Less than 3 years of age State      \r\n    strAgeLessThanThreeState <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested),\r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse isn't required for state since state will always return a value\r\n      #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n      unique(\r\n        df_leadRaw[df_leadRaw$year == input$parLocal_leadYear &\r\n                   df_leadRaw$ageGroup == \"<3 years\" &\r\n                   df_leadRaw$location == \"Minnesota\" &\r\n                   df_leadRaw$indicator== \"Blood lead testing\" &\r\n                   df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeLessThanThreeState <- paste0(\r\n      strAgeLessThanThreeState,\r\n      \"Minnesota <\/font> \",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<3 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      ),\r\n      \"% (\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<3 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n      ),\r\n      \"/\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<3 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n      ),\r\n      \")\"\r\n    )\r\n    \r\n    ##### Less than 3 years of age Region      \r\n    strAgeLessThanThreeRegion <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse isn't required for regions since regions will always return a value\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionTestPct)\r\n    )\r\n    {\" <b>less<\/b> than the <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than the <font color=red>\"}\r\n    \r\n    strAgeLessThanThreeRegion <- paste0(\r\n      strAgeLessThanThreeRegion,\r\n      input$parGlobal_region, \r\n      \"<\/font> region \",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionTestPct),\r\n      \"% (\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionNumTested),\r\n      \"/\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionDenominator),\r\n      \")\"\r\n    )\r\n    \r\n    ##### Less than 3 years of age CHB      \r\n    strAgeLessThanThreeChb <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct),\r\n        0\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  { \" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeLessThanThreeChb <- paste0(\r\n      strAgeLessThanThreeChb,\r\n      input$parGlobal_chb, \r\n      \"<\/font> \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct),\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbNumTested)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbNumTested),\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbDenominator)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbDenominator),\r\n        0\r\n      ),\r\n      \")\"\r\n    )\r\n    \r\n    #######################Final Narrative snippet     \r\n    strAgeLessThanThree <- paste0(\r\n      \"In <font color=red>\",\r\n      input$parLocal_leadYear,\r\n      \"<\/font>, \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$numTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$numTested,\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$denominator), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$denominator,\r\n        0\r\n      ),\r\n      \") of <font color=red>\",\r\n      input$parGlobal_county, \r\n      \"<\/font> residents <b>under the age of 3 <\/b>had their blood lead levels tested which is\",\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"CHB\")){strAgeLessThanThreeChb},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"Region\")){strAgeLessThanThreeRegion},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"State\")){strAgeLessThanThreeState}\r\n    )\r\n    \r\n    ####################################################################################################################################################################################\r\n    ## 3 to 6 YEARS OF AGE\r\n    \r\n    ##### 3 to 6 years of age State      \r\n    strAgeThreeToSixState <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested),\r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse isn't required for state since state will always return a value\r\n      #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n      unique(\r\n        df_leadRaw[df_leadRaw$year == input$parLocal_leadYear &\r\n                   df_leadRaw$ageGroup == \"3-<6 years\" &\r\n                   df_leadRaw$location == \"Minnesota\" &\r\n                   df_leadRaw$indicator== \"Blood lead testing\" &\r\n                   df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeThreeToSixState <- paste0(\r\n      strAgeThreeToSixState,\r\n      \"Minnesota <\/font> \",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"3-<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      ),\r\n      \"% (\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"3-<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n      ),\r\n      \"/\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"3-<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n      ),\r\n      \")\"\r\n    )\r\n    \r\n    \r\n    ##### 3 to 6 years of age Region      \r\n    strAgeThreeToSixRegion <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionTestPct)\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeThreeToSixRegion <- paste0(\r\n      strAgeThreeToSixRegion,\r\n      input$parGlobal_region, \r\n      \"<\/font> \",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionTestPct),\r\n      \"% (\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionNumTested),\r\n      \"/\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionDenominator),\r\n      \")\"\r\n    )\r\n    \r\n    ##### 3 to 6 years of age CHB      \r\n    strAgeThreeToSixChb <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct),\r\n        0\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeThreeToSixChb <- paste0(\r\n      strAgeThreeToSixChb,\r\n      input$parGlobal_chb,\r\n      \"<\/font> \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct),\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbNumTested)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbNumTested),\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbDenominator)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbDenominator),\r\n        0\r\n      ),\r\n      \")\"\r\n    )\r\n    #######################Final Narrative snippet     \r\n    strAgeThreeToSix <- paste0(\r\n      \"In <font color=red>\",\r\n      input$parLocal_leadYear,\r\n      \"<\/font>, \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$numTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$numTested,\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$denominator), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$denominator,\r\n        0\r\n      ),\r\n      \") of <font color=red>\",\r\n      input$parGlobal_county, \r\n      \"<\/font> residents ages <b>3 to 6 <\/b>had their blood lead levels tested which is\",\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"CHB\")){strAgeThreeToSixChb},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"Region\")){strAgeThreeToSixRegion},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"State\")){strAgeThreeToSixState}\r\n    )\r\n    ####################################################################################################################################################################################\r\n    ## Less Than 6 YEARS OF AGE\r\n    \r\n    ##### < 6 years of age State      \r\n    strAgeLessThanSixState <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested),\r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse isn't required for state since state will always return a value\r\n      #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n      unique(\r\n        df_leadRaw[df_leadRaw$year == input$parLocal_leadYear &\r\n                   df_leadRaw$ageGroup == \"<6 years\" &\r\n                   df_leadRaw$location == \"Minnesota\" &\r\n                   df_leadRaw$indicator== \"Blood lead testing\" &\r\n                   df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeLessThanSixState <- paste0(\r\n      strAgeLessThanSixState,\r\n      \"Minnesota <\/font> \",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n      ),\r\n      \"% (\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n      ),\r\n      \"/\",\r\n      unique(\r\n        df_leadRaw[ df_leadRaw$year == input$parLocal_leadYear &\r\n                      df_leadRaw$ageGroup == \"<6 years\" &\r\n                      df_leadRaw$location == \"Minnesota\" &\r\n                      df_leadRaw$indicator== \"Blood lead testing\" &\r\n                      df_leadRaw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n      ),\r\n      \")\"\r\n    )\r\n    \r\n    ##### < 6 years of age Region      \r\n    strAgeLessThanSixRegion <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionTestPct)\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeLessThanSixRegion <- paste0(\r\n      strAgeLessThanSixRegion,\r\n      input$parGlobal_region, \r\n      \"<\/font> \",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionTestPct),\r\n      \"% (\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionNumTested),\r\n      \"/\",\r\n      unique(lead_region_sub()[lead_region_sub()$year == input$parLocal_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionDenominator),\r\n      \")\"\r\n    )\r\n    \r\n    ##### < 6 years of age CHB      \r\n    strAgeLessThanSixChb <- if(\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n        0\r\n      )\r\n      <\r\n      #ifelse is required for the times when a value is not provided\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct),\r\n        0\r\n      )\r\n    )\r\n    {\" <b>less<\/b> than <font color=red>\"}\r\n    else  {\" <b>greater<\/b> than <font color=red>\"}\r\n    \r\n    strAgeLessThanSixChb <- paste0(\r\n      strAgeLessThanSixChb,\r\n      input$parGlobal_chb,\r\n      \"<\/font> \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct),\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbNumTested)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbNumTested),\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na() did not work correctly\r\n        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbDenominator)), \r\n        #If meets criteria and is not null then it will return valid value\r\n        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$parLocal_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbDenominator),\r\n        0\r\n      ),\r\n      \")\"\r\n    )\r\n    #######################Final Narrative snippet     \r\n    strAgeLessThanSix <- paste0(\r\n      \"In <font color=red>\",\r\n      input$parLocal_leadYear,\r\n      \"<\/font>, \",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n        0\r\n      ),\r\n      \"% (\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$numTested), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$numTested,\r\n        0\r\n      ),\r\n      \"/\",\r\n      ifelse(\r\n        #Any checks if any true values exist. is.na did not work correctly\r\n        any(lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$denominator), \r\n        #If meets criteria and is not null then it will return valid value\r\n        lead_county_sub()[lead_county_sub()$year == input$parLocal_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$denominator,\r\n        0\r\n      ),\r\n      \") of <font color=red>\",\r\n      input$parGlobal_county, \r\n      \"<\/font> residents <b>under the age of 6 <\/b> had their blood lead levels tested which is\",\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"CHB\")){strAgeLessThanSixChb},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"Region\")){strAgeLessThanSixRegion},\r\n      if(input$par_leadStateRegionChb %in% c(\"All\",\"State\")){strAgeLessThanSixState}\r\n    )\r\n    HTML(paste\r\n         (\r\n           strAgeLessThanThree,\r\n           strAgeThreeToSix,\r\n           strAgeLessThanSix,\r\n           sep= '<br/><br/>' #I wanted two line breaks between each string\r\n         )\r\n    )\r\n    \r\n  })\r\n}\r\n\r\nshinyApp(ui=ui, server=server)\r\n\r\n","type":"text"},{"name":"Childhood Lead Exposure.R","content":"\r\nchildhoodLeadExposureUI <- function(id) {\r\n  ns <- NS(id)\r\n  shiny::tagList(\r\n    textOutput(NS(id, \"text\"))\r\n  )\r\n}\r\n\r\nchildhoodLeadExposureServer <- function(id, df) {\r\n  moduleServer(id, function(input, output, session) {\r\n      \r\n    n <- reactive({sum(df()) })\r\n    output$text <- renderText({n()})\r\n      \r\n      \r\n    }\r\n  )\r\n}\r\n","type":"text"},{"name":"Data/df_globalSchsacChb.R","content":"# State Community Health Services Advisory Committee as of 1_17_2024\r\ndf_schsacRaw <- read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/State%20Community%20Health%20Services%20Advisory%20Committee%20as%20of%201_17_2024.csv\") |> \r\n  janitor::clean_names()\r\n\r\n# Community Health Board as of 1_17_2024\r\ndf_chbRaw <- read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/Community%20Health%20Board%20as%20of%201_17_2024.csv\") |> \r\n  janitor::clean_names()\r\n\r\n#Some CHB's are at the city level and not the county level which is why I do a full join\r\n# And I still want them to display in the global selectInput choice\r\ndf_globalSchsacChb <- df_schsacRaw |> \r\ndplyr::full_join(df_chbRaw, by = dplyr::join_by(county == county)) \r\n\r\n# When I source this I only want to pull the finally data frame which is why I remove the following\r\nrm(df_chbRaw)\r\nrm(df_schsacRaw)","type":"text"},{"name":"Data/df_localChildhoodLeadExposure.R","content":"\r\nsource(\"./Data/df_globalSchsacChb.R\")\r\n\r\n#* Childhood Lead Exposure and clean data\r\n#* I will have to do some performance testing to see if it is better to do these calculations all here or to do the calculations based on selected parms\r\n#* My assumption is to pre-compile all the calculations, loading will be a little slower but application interaction should be better \r\ndf_leadRaw <-  read.csv(\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\") |> \r\n  janitor::clean_names() |>\r\n  \r\n  #Removed MN because I am going to calculate it like region and chb\r\n  # There is a difference between this and the MN total; I notified MDH on 5/23/24 that there \r\n  # MN total doesn't match the sum of the counties with respect to the below grouping\r\n  # I checked this without any data manipulation and there seems to be an error in the numerator\r\n  # The denominator matches\r\n  dplyr::filter(location != \"Minnesota\") |>\r\n  dplyr::select(indicator, indicator_type, year, location, age_group, ebll_description, num_tested, denominator) |>\r\n  dplyr::left_join(df_globalSchsacChb, by = dplyr::join_by(location == county)) |> \r\n  \r\n  #Determine MN total with respect to the following fields\r\n  dplyr::group_by(indicator, indicator_type, year, age_group, ebll_description) |>\r\n  dplyr::mutate(mnNumerator = sum(num_tested), mnDenominator = sum(denominator), mnPct = round(sum(num_tested) / sum(denominator) *100,2))  |> \r\n  dplyr::ungroup() |> \r\n  \r\n  #Determine Region total with respect to the following fields\r\n  dplyr::group_by(indicator, indicator_type, year, age_group, ebll_description, region) |> \r\n  dplyr::mutate(regionNumerator = sum(num_tested), regionDenominator = sum(denominator), regionPct = round(sum(num_tested) / sum(denominator) *100,2)) |> \r\n  dplyr::ungroup() |> \r\n  \r\n  #Determine CHB total with respect to the following fields\r\n  dplyr::group_by(indicator, indicator_type, year, age_group, ebll_description, chb) |> \r\n  dplyr::mutate(chbNumerator = sum(num_tested), chbDenominator = sum(denominator), chbPct = round(sum(num_tested) / sum(denominator) *100,2)) |> \r\n  dplyr::ungroup()\r\n\r\n# When I source this I only want to pull the finally data frame which is why I remove the following\r\nrm(df_globalSchsacChb)\r\n","type":"text"},{"name":"Modules/Test.R","content":"\r\n\r\n\r\nnameUI <- function(id) {\r\n  ns <- NS(id)\r\n  tagList(\r\n  \r\n  )\r\n}\r\n\r\n\r\notherModuleServer <- function(id, county, region, chb) {\r\n  moduleServer(id,function(input, output, session) {\r\n    # Use the reactive values\r\n    observe({\r\n      print(paste(\"Selected county:\", county()))\r\n      print(paste(\"Selected region:\", region()))\r\n      print(paste(\"Selected CHB:\", chb()))\r\n    })\r\n    # ... rest of the server logic\r\n      \r\n    }\r\n  )\r\n}","type":"text"},{"name":"Modules/mod_globalParSchsacChb.R","content":"\r\nsource(\"./Data/df_globalSchsacChb.R\")\r\n\r\n# Module UI Function\r\nmod_globalparSchsacChbInputUI <- function(id) {\r\n  ns <- NS(id)\r\n  tagList(\r\n    #Check box will be used on every tab to hide some sort of narrative\r\n    checkboxInput(ns(\"parGlobal_hideNarrative\"), label = \"HIDE NARRATIVE\"),\r\n    selectInput(\r\n      ns(\"parGlobal_county\"),\r\n      label= \"Select County of Interest\",\r\n      choices= sort(unique(df_globalSchsacChb$county)),\r\n      selected= \"Kittson\",\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      ns(\"parGlobal_region\"),\r\n      label= \"Select SCHSAC Region\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    ),\r\n    selectInput(\r\n      ns(\"parGlobal_chb\"),\r\n      label= \"Select Community Health Board\",\r\n      choices= NULL,\r\n      selected= NULL,\r\n      multiple= FALSE,\r\n      width= 350 \r\n    )\r\n  )\r\n}\r\n\r\n# Module Server Function using moduleServer\r\nmod_globalparSchsacChbInputServer <- function(id) {\r\n  moduleServer(id, function(input, output, session) {\r\n    observeEvent(input$parGlobal_county, {\r\n      \r\n      # Update the region input based on the county input\r\n      # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples. \r\n      # Currently, the county source is from the region data source but if it ever changes this should help capture it\r\n      if(input$parGlobal_county %in% df_globalSchsacChb$county) {\r\n        updateSelectInput(\r\n          session, \"parGlobal_region\",\r\n          choices =  unique(df_globalSchsacChb$region[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)]),\r\n          selected = unique(df_globalSchsacChb$region[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)])[1]\r\n        )\r\n        updateSelectInput(\r\n          session, \"parGlobal_chb\",\r\n          choices =  unique(df_globalSchsacChb$chb[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)]),\r\n          selected = unique(df_globalSchsacChb$chb[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)])[1] #Default to the first choice, which will automatically change the cascading results when the parameter is mapped to a ggplot\r\n        )\r\n      }\r\n      else {\r\n        updateSelectInput(\r\n          session, \"parGlobal_region\",\r\n          choices = \"\",\r\n          selected = \"\"\r\n        )\r\n        updateSelectInput(\r\n          session, \"parGlobal_chb\",\r\n          choices = \"\",\r\n          selected = \"\"\r\n        )\r\n      }\r\n    })\r\n    # Update the chb input based on the county input\r\n    # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples. \r\n    # Currently, the county source is from the chb data source but if it ever changes this should help capture it\r\n    # observeEvent(input$parGlobal_county, {\r\n    #   if(input$parGlobal_county %in% df_globalSchsacChb$county) {\r\n    #     updateSelectInput(\r\n    #       session, \"parGlobal_chb\",\r\n    #       choices =  unique(df_globalSchsacChb$chb[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)]),\r\n    #       selected = unique(df_globalSchsacChb$chb[order(input$parGlobal_county == df_globalSchsacChb$county, decreasing = TRUE)])[1] #Default to the first choice, which will automatically change the cascading results when the parameter is mapped to a ggplot\r\n    #     )\r\n    #   }\r\n    #   else {\r\n    #     updateSelectInput(\r\n    #       session, \"parGlobal_chb\",\r\n    #       choices = \"\",\r\n    #       selected = \"\"\r\n    #     )\r\n    #   }\r\n    # }\r\n    # )\r\n    #Credit goes to MS Copilot for the following code. Obtained 5/24/2024\r\n    # Create reactive values for the selected county and region\r\n     selectedCounty <- reactive({ input$parGlobal_county })\r\n     selectedRegion <- reactive({ input$parGlobal_region })\r\n     selectedChb <- reactive({ input$parGlobal_chb })\r\n    # \r\n    # # Return a list of reactive values to be used in other modules\r\n     return(list(\r\n       selectedCounty = selectedCounty,\r\n       selectedRegion = selectedRegion,\r\n       selectedChb = selectedChb\r\n     ))\r\n    \r\n  })\r\n}\r\n\r\n# Below is how I can test the application\r\n# Standard Shiny UI\r\nlibrary(shiny)\r\n ui <- fluidPage(titlePanel(\"Test\"),sidebarLayout(sidebarPanel(mod_globalparSchsacChbInputUI(\"x\")),mainPanel()))\r\n# # Main App Server\r\n server <- function(input, output, session) {mod_globalparSchsacChbInputServer(\"x\")}\r\n shinyApp(ui, server)\r\n","type":"text"},{"name":"Modules/mod_localChildhoodLeadExposure.R","content":"\r\nsource(\"./Data/df_localChildhoodLeadExposure.R\")\r\n\r\n\r\nmod_localChildhoodLeadExposureUI <- function(id) {\r\n  ns <- NS(id)\r\n  shiny::tagList(\r\n    fluidRow(\r\n      column(\r\n        width = 4,\r\n        selectInput(\r\n          ns(\"parLocal_leadIndicator\"),\r\n          label= \"Select Indicator\",\r\n          choices= sort(unique(df_leadRaw$indicator)),\r\n          selected= df_leadRaw$indicator[1],\r\n          multiple= FALSE\r\n        )\r\n      ),\r\n      column(\r\n        width = 4,\r\n        selectInput(\r\n          ns(\"parLocal_leadIndicatorType\"),\r\n          label= \"Select Indicator Type\",\r\n          choices= sort(unique(df_leadRaw$indicator_type)),\r\n          selected= NULL,\r\n          multiple= FALSE\r\n        )\r\n      ),\r\n      column(\r\n        width = 4,\r\n        selectInput(\r\n          ns(\"parLocal_leadYear\"),\r\n          label= \"Select Year\",\r\n          choices= NULL,\r\n          selected= NULL,\r\n          multiple= FALSE\r\n        )\r\n      )\r\n    ),\r\n    fluidRow(\r\n        # Narrative section explaining the purpose of the dashboard\r\n        column(\r\n          width = 12,\r\n          id = \"cID_leadNarrative\",\r\n          tags$h4(htmlOutput(\"lead_narrative\")),\r\n          tags$h3(\"For information about why this data is important please visit \",\r\n                  tags$a(href=\"https://data.web.health.state.mn.us/lead\", \"here!\", target= \"_blank\")\r\n          ),\r\n          tags$h3(\"Data for this project can be found \",\r\n                  tags$a(href=\"https://data.web.health.state.mn.us/lead_query\", \"here!\", target= \"_blank\")\r\n          ),\r\n          tags$h3(\"Data for this project is stored \",\r\n                  tags$a(href=\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\",\r\n                         \"here!\", target= \"_blank\")\r\n          )\r\n        )\r\n      )\r\n  )\r\n}\r\n\r\nmod_localChildhoodLeadExposureServer <- function(id, df) {\r\n  moduleServer(id, function(input, output, session) {\r\n      \r\n    observeEvent(input$parLocal_leadIndicatorType, {\r\n      if(input$parLocal_leadIndicatorType %in% \"Birth year (cohort method)\") {\r\n        updateSelectInput(\r\n          session, \"parLocal_leadYear\",\r\n          choices =  sort(unique(df_leadRaw$year[input$parLocal_leadIndicatorType== df_leadRaw$indicator_type]), decreasing = TRUE),\r\n          selected = sort(unique(df_leadRaw$year[input$parLocal_leadIndicatorType== df_leadRaw$indicator_type]), decreasing = TRUE)[1]\r\n        )\r\n      }\r\n      else {\r\n        updateSelectInput(\r\n          session, \"parLocal_leadYear\",\r\n          choices =  sort(unique(df_leadRaw$year[input$parLocal_leadIndicatorType== df_leadRaw$indicator_type]), decreasing = TRUE),\r\n          selected = sort(unique(df_leadRaw$year[input$parLocal_leadIndicatorType== df_leadRaw$indicator_type]), decreasing = TRUE)[1]\r\n        )\r\n      }\r\n    })\r\n    }\r\n  )\r\n}\r\n\r\n\r\n\r\n# Below is how I can test the application\r\n# Standard Shiny UI\r\n#  library(shiny)\r\n#  ui <- fluidPage(titlePanel(\"Test\"),sidebarLayout(sidebarPanel(mod_localChildhoodLeadExposureUI(\"x\")),mainPanel()))\r\n# # Main App Server\r\n#  server <- function(input, output, session) {mod_localChildhoodLeadExposureServer(\"x\")}\r\n#  shinyApp(ui, server)\r\n","type":"text"},{"name":"appPractice.R","content":"# Shiny Dashboard\r\n# Hastag (# ---------------------------------------------------------------) means Primary Header\r\n# Hastag (### *** Definition ###) means Secondary Header\r\n# Hold shift alt o to collapse all\r\n# Hold alt o to expand all\r\n\r\n# Load Packages ---------------------------------------------------------------\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\n# shinyLive already downloads the following packages so rather than download them again, I just reference them\r\n#library(dplyr)\r\n#library(shinydashboard)\r\n#Loading shinyjs really slowed down my application load time. By loading just the functions I required such as shnyjs::useShinyjs(), my application ran way faster\r\n#library(shinyjs)\r\n\r\n# Data\r\n#source(\"Data/df_globalSchsacChb.R\")\r\n\r\nsource(\"./Modules/mod_globalParSchsacChb.R\")\r\nsource(\"./Modules/Test.R\")\r\n\r\n# User Interface ----------------------------------------------------------\r\nui <- shinydashboard::dashboardPage(\r\n  shinydashboard::dashboardHeader(\r\n    title = \"MN Public Health Data Access Portal\",\r\n    titleWidth = 400\r\n    #disable = TRUE #uncomment if the header should be hid\r\n  ),\r\n  shinydashboard::dashboardSidebar(\r\n    width = 350, #This makes the sidebar wider. However, the input boxes seem to have a set dimension resulting in long names still wrapping\r\n    #First sucessful module!\r\n    #What makes modules really neat, is the id can be the same for all modules since it doesn't seem \r\n    #to get referenced until it is passed to the module, If a module has a ui and server, than it will require the same id\r\n    mod_globalparSchsacChbInputUI(id =\"x\"),\r\n    \r\n    #Sidebar is required to have sub menus because it requires the tabName to reference\r\n    #By having sidebarMenu id, I can reference it and hide other filters with shinyjs \r\n    shinydashboard::sidebarMenu(\r\n      id= \"smID\",\r\n      shinydashboard::menuItem(\"Home\", tabName = \"tn_homePage\"),\r\n      shinydashboard::menuItem(\"Region & CHB Defintions\", tabName = \"tn_regionChbDefinations\"),\r\n      shinydashboard::menuItem(\"Child Health\", tabName = \"tn_childHealth\"),\r\n      shinydashboard::menuItem(\"Climate\", tabName = \"tb_climate\"),\r\n      shinydashboard::menuItem(\"Diseases & Conditions\", tabName = \"tn_diseasesConditions\"),\r\n      shinydashboard::menuItem(\"Environmental Health\", tabName = \"tn_environmepntalHealth\"),\r\n      shinydashboard::menuItem(\"Health Behaviors/Risk Factors\", tabName = \"tn_healthBehaviorsRiskFactors\"),\r\n      shinydashboard::menuItem(\"Health Equity\", tabName = \"tn_HealthEquity\"),\r\n      shinydashboard::menuItem(\"Healthy Homes\", tabName = \"tn_healthyHomes\")\r\n    )\r\n  ),\r\n  shinydashboard::dashboardBody(\r\n    shinyjs::useShinyjs(), #Thank you Abby Stamm at MDH for suggesting to only call one function in a package rather then load entire package\r\n    shinydashboard::tabItems(\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_homePage\", #tabName is what ties the menuItem to the tabItem\r\n                 tabsetPanel(\r\n                   tabPanel(\r\n                     \"Home Page\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the purpose of the dashboard\r\n                       column(\r\n                         width = 12,\r\n                         tags$h1(\"Welcome to the Landing Page for This Awesome Dashboard...Subjective of Course :)\"),\r\n                         tags$h4(\"This shinyLive application is designed to replicate the work represeted \",\r\n                                 tags$a(href=\"https://data.web.health.state.mn.us/web/mndata/\", \"here!\", target= \"_blank\")\r\n                         ),\r\n                         tags$h4(\"The features displayed on the top left are called parameters that require input from you\"),\r\n                         tags$h4(\"The features displayed on the botton left are called sidebar menus.\"),\r\n                         tags$h4(\"Each sidebar menu will have at least one tab associated with it.\"),\r\n                         tags$h4(\"For example, this Home sidebar menu has the Home Page tab associated with it.\"),\r\n                         tags$h3(\"Currently, only two sidebar menus currently are working\"),\r\n                         tags$h4(\"The Region & CHB Defintions sidebar menu has both tabs (Region and CHB) working\"),\r\n                         tags$h4(\"The Healthy Homes sidebar menu only has the Childhood Lead Exposure tab working\"),\r\n                         tags$h4(\"Limitations to the Childhood Lead Exposure data can be found \",\r\n                                 tags$a(href=\"https://data.web.health.state.mn.us/lead_metadata\", \"here!\", target= \"_blank\")\r\n                         )\r\n                       )\r\n                     )\r\n                   )\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_regionChbDefinations\",\r\n                 tabsetPanel( type = \"tabs\", \r\n                   tabPanel(\r\n                     \"Region\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the dashboard purpose\r\n                       column(\r\n                         width = 12,\r\n                         h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Regions will remain in <b>bold<\/b>.\")),\r\n                         h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they do not execute any function on this tab.\"),\r\n                         h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which region.\"),\r\n                         #The next line inserts a line between the narrative and the data\r\n                         tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                       )\r\n                     ),\r\n                     fluidRow(\r\n                       uiOutput(\"region_narrative\", style = \"font-size: 20px;\")\r\n                     )\r\n                   ),\r\n                   tabPanel(\r\n                     \"CHB\",\r\n                     fluidRow(\r\n                       # Narrative section explaining the purpose of the dashboard\r\n                       column(\r\n                         width = 12,\r\n                         h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Community Health Boards will remain in <b>bold<\/b>.\")),\r\n                         h3(\"For this tab, the Select SCHSAC Region and Select Community Health Board filters are greyed out because they don't have any functions on this page.\"),\r\n                         h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which Community Health Board.\"),\r\n                         #The next line inserts a line between the narrative and the data\r\n                         tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                       )\r\n                     ),\r\n                     fluidRow(\r\n                       column(6, uiOutput(\"chb_narrative_01\", style = \"font-size: 20px;\")),\r\n                       column(6, uiOutput(\"chb_narrative_02\", style = \"font-size: 20px;\"))\r\n                     )\r\n                   )\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_childHealth\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Asthma\"),\r\n                   tabPanel(\"Health Inequities in Childhood Asthma\"),\r\n                   tabPanel(\"Birth Defects\"),\r\n                   tabPanel(\"Childhood Lead Exposure\"),\r\n                   tabPanel(\"Free/Reduced Price Lunch Eligibility\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Oral Health\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tb_climate\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Air Quality\"),\r\n                   tabPanel(\"Cold-related Illness\"),\r\n                   tabPanel(\"tbClimate-related Environmental Health Concerns\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Hot Weather\"),\r\n                   tabPanel(\"Pollen\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_diseasesConditions\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Asthma\"),\r\n                   tabPanel(\"Birth Defects\"),\r\n                   tabPanel(\"Cancer\"),\r\n                   tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                   tabPanel(\"Chronic Obstructive Pulmonary Disease (COPD)\"),\r\n                   tabPanel(\"Diabetes\"),\r\n                   tabPanel(\"Heart Attacks\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Oral Health\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_environmentalHealth\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Air Quality\"),\r\n                   tabPanel(\"Biomonitoring: Chemicals in people\"),\r\n                   tabPanel(\"Cold-related Illness\"),\r\n                   tabPanel(\"Drinking Water Quality\"),\r\n                   tabPanel(\"Environmental Justice\"),\r\n                   tabPanel(\"Heat-related Illness\"),\r\n                   tabPanel(\"Pesticide Poisoning\"),\r\n                   tabPanel(\"Traffic\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_healthBehaviorsRiskFactors\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Health Insurance\"),\r\n                   tabPanel(\"Immunizations\"),\r\n                   tabPanel(\"Obesity\"),\r\n                   tabPanel(\"Oral Health\"),\r\n                   tabPanel(\"Poverty & Income\"),\r\n                   tabPanel(\"Smoking\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_HealthEquity\",\r\n                 tabsetPanel(\r\n                   tabPanel(\"Health Equity\"),\r\n                   tabPanel(\"Health Inequities in Childhood Lead Exposure\"),\r\n                   tabPanel(\"Health Inequities in Childhood Asthma\")\r\n                 )\r\n               ),\r\n      shinydashboard::tabItem(\r\n                 tabName = \"tn_healthyHomes\",\r\n                 tabsetPanel(\r\n                   id=\"tpId_healthyHomes\",\r\n                   tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                   tabPanel(\"Childhood Lead Exposure\",\r\n                            mod_localChildhoodLeadExposureUI(\"x\")\r\n                            # \r\n                            # fluidRow(\r\n                            # \r\n                            #   # Narrative section explaining the purpose of the dashboard\r\n                            #   column(\r\n                            #     width = 12,\r\n                            #     id = \"cID_leadNarrative\",\r\n                            #     tags$h4(htmlOutput(\"lead_narrative\")),\r\n                            #     tags$h3(\"For information about why this data is important please visit \",\r\n                            #             tags$a(href=\"https://data.web.health.state.mn.us/lead\", \"here!\", target= \"_blank\")\r\n                            #     ),\r\n                            #     tags$h3(\"Data for this project can be found \",\r\n                            #             tags$a(href=\"https://data.web.health.state.mn.us/lead_query\", \"here!\", target= \"_blank\")\r\n                            #     ),\r\n                            #     tags$h3(\"Data for this project is stored \",\r\n                            #             tags$a(href=\"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\",\r\n                            #                    \"here!\", target= \"_blank\")\r\n                            #     )\r\n                            #   )\r\n                            # ),\r\n                            # fluidRow(\r\n                            #   #The next line inserts a line between the narrative and the data.\r\n                            #   #It is added here instead of in the narrative since the narrative can have multiple columns.\r\n                            #   #If there are multiple narrative columns and the line is added there than the line consists of multiple breaks\r\n                            #   tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\"),\r\n                            #   box(plotOutput(\"lead_state\")),\r\n                            #   box(plotOutput(\"lead_region\"))\r\n                            # ),\r\n                            # fluidRow(\r\n                            #   box(plotOutput(\"lead_chb\")),\r\n                            #   box(plotOutput(\"lead_county\"))\r\n                            # )\r\n                   ),\r\n                   tabPanel(\"Drinking Water Quality\"),\r\n                   tabPanel(\"Pesticide Poisoning\"),\r\n                   tabPanel(\"Radon\")\r\n                 )\r\n               )\r\n             )\r\n     )\r\n  )\r\n  \r\n  server <- function(input, output, session) {\r\n    \r\n    mod_globalparSchsacChbInputServer(id= \"x\")\r\n   \r\n    \r\n    globalReactiveCountySchsacChb <- mod_globalparSchsacChbInputServer(id= \"x\")\r\n    \r\n     # Pass the reactive values to another module\r\n    otherModuleServer(id= \"x\", \r\n                      globalReactiveCountySchsacChb$selectedCounty, \r\n                      globalReactiveCountySchsacChb$selectedRegion, \r\n                      globalReactiveCountySchsacChb$selectedChb\r\n                      )\r\n  \r\n # childhoodLeadExposureServer(df_leadUserChoice)\r\n    \r\n    mod_localChildhoodLeadExposureServer(\"x\")\r\n  \r\n  }\r\n  shinyApp(ui=ui, server=server)\r\n  \r\n  ","type":"text"}]
